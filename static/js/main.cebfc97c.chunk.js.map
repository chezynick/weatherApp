{"version":3,"sources":["components/Header.js","components/Search.js","components/Weather.js","components/PlaceHolder.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Search","cities","setCities","setCurrentCity","currentCity","useState","name","newCity","setNewCity","onChange","e","target","value","onSubmit","preventDefault","type","placeholder","Weather","currentWeather","setCurrentWeather","currentTemp","setCurrentTemp","currentWind","setCurrentWind","faSnowflake","weatherImage","setWeatherImage","colorBkgrnd","setcolorBkgrnd","clouds","setClouds","cloudier","setCloudier","humidity","setHumidity","cityWeather","city","a","fetch","response","json","weather","description","main","temp","toFixed","wind","speed","all","console","log","useEffect","colorist","images","faCloudRain","faCloud","faCloudSun","faSun","Number","size","icon","faTemperatureHigh","faWind","PlaceHolder","changeHandler","filter","innerText","map","onClick","deleteCity","town","deleteHandler","faTrashAlt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cebfc97c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <h1 className=\"Header\">weatherist</h1>\n    )\n}\nexport default Header","import React, { useState } from \"react\";\n\nconst Search = ({ cities, setCities, setCurrentCity, currentCity }) => {\n  //state for adding new city to list\n  const [newCity, setNewCity] = useState({ name: \"\" });\n  //event handlers\n  const changeHandler = (e) => {\n    setNewCity({ name: e.target.value });\n    \n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setCities([...cities, newCity]);\n    setCurrentCity([newCity]);\n    setNewCity({ name: \"\" })\n    \n    return currentCity;\n  };\n\n  return (\n    <form className=\"Search\" onChange={changeHandler} onSubmit={submitHandler}>\n      <input type=\"text\" placeholder=\"Search for your City?\" value={newCity.name}/>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\nexport default Search;\n","import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCloud,\n  faCloudSun,\n  faSun,\n  faWind,\n  faSnowflake,\n  faCloudRain,\n  faTemperatureHigh,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Weather = ({ currentCity }) => {\n  //weather states\n  const [currentWeather, setCurrentWeather] = useState(\"\");\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [currentWind, setCurrentWind] = useState([]);\n  const [weatherImage, setWeatherImage] = useState(faSnowflake);\n  const [colorBkgrnd, setcolorBkgrnd] = useState(\"Weather\");\n  const [clouds, setClouds] = useState(50);\n  const [cloudier, setCloudier] = useState(\"cloud2\");\n  const [humidity, setHumidity] = useState(0);\n\n  //function to get current weather and to update state of weather\n  const cityWeather = async (city) => {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=` +\n          city +\n          `&units=metric&APPID=84634c62ad44fa7c5c527c3f90102a59`\n      );\n      const weather = await response.json();\n      setCurrentWeather(weather.weather[0].description);\n      setCurrentTemp(weather.main.temp.toFixed(0));\n      setCurrentWind(weather.wind.speed.toFixed(0));\n      setClouds(weather.clouds.all);\n      setHumidity(weather.main.humidity);\n    } catch (err) {\n      console.log(err, \"not worked this\");\n    }\n  };\n  //call api get function after changes made to state\n  useEffect(() => cityWeather(currentCity[0].name), [currentCity]);\n  useEffect(() => colorist(), [currentTemp]);\n  useEffect(() => images(), [clouds]);\n\n  const images = () => {\n    //change the weather icon depending on weather\n\n    if (clouds > 70 && humidity > 85) {\n      setWeatherImage(faCloudRain);\n      setCloudier(\"cloudVisible\");\n    } else if (clouds > 70) {\n      setWeatherImage(faCloud);\n      setCloudier(\"cloudVisible\");\n    } else if (clouds > 30 && clouds < 70) {\n      setWeatherImage(faCloudSun);\n      setCloudier(\"cloud2\");\n    } else if (clouds <= 30) {\n      setWeatherImage(faSun);\n      setCloudier(\"cloud2\");\n    } else {\n      setWeatherImage(faCloud);\n      setCloudier(\"cloud2\");\n    }\n  };\n\n  const colorist = () => {\n    if (Number(currentTemp) < 10) {\n      setcolorBkgrnd(\"WeatherCold\");\n    } else if (Number(currentTemp) > 20) {\n      setcolorBkgrnd(\"WeatherHot\");\n    } else {\n      setcolorBkgrnd(\"Weather\");\n    }\n  };\n  return (\n    <div className={colorBkgrnd}>\n      <h1 className=\"cityName\">{currentCity[0].name}</h1>\n      <h1 className=\"weatherType\">{currentWeather}</h1>\n      <FontAwesomeIcon\n        className=\"weatherImage\"\n        size=\"10x\"\n        icon={weatherImage}\n      />\n      <FontAwesomeIcon className={cloudier} size=\"7x\" icon={weatherImage} />\n      <h1 className=\"temp\"><FontAwesomeIcon className='windIcon' size=\"1x\" icon={faTemperatureHigh} />{currentTemp}c</h1>\n      <h1 className=\"wind\">{currentWind}mph<FontAwesomeIcon className='windIcon' size=\"1x\" icon={faWind} /></h1>\n    </div>\n  );\n};\nexport default Weather;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PlaceHolder = ({ cities, setCities, setCurrentCity }) => {\n  //select and delete functions\n\n  const changeHandler = (e) => {\n    const newCity = cities.filter((city) => city.name === e.target.innerText);\n    setCurrentCity(newCity);\n  };\n  const deleteHandler = (city) => {\n    const deleteCity = cities.filter(town => town.name !== city)\n    setCities(deleteCity)\n  }\n  return (\n    <div className=\"PlaceHolder\">\n      {cities.map((city) => {\n        return (\n          <div className=\"Place\" key={city.name} >\n            <h1 className=\"placeNames\" onClick={changeHandler} >{city.name}</h1>\n            <FontAwesomeIcon onClick={() => deleteHandler(city.name)} className=\"trash\" size=\"2x\" icon={faTrashAlt}/>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nexport default PlaceHolder;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\n//component import\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\nimport PlaceHolder from \"./components/PlaceHolder\";\n\nfunction App() {\n  //state variables\n  const [cities, setCities] = useState([\n    { name: \"melbourne\" },\n    { name: \"manchester\" },\n    { name: \"hull\" },\n  ]);\n  const [currentCity, setCurrentCity] = useState([{ name: \"manchester\" }]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"left\">\n        <Header />\n        <Search\n          setCities={setCities}\n          cities={cities}\n          setCurrentCity={setCurrentCity}\n          currentCity={currentCity}\n        />\n        <Weather currentCity={currentCity} />\n      </div>\n      <div className=\"right\">\n        <PlaceHolder\n          cities={cities}\n          setCities={setCities}\n          currentCity={currentCity}\n          setCurrentCity={setCurrentCity}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}